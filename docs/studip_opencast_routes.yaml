swagger: "2.0"
info:
  description: "JSON Routes for Opencast V3"
  version: "1.0.0"
  title: "Opencast V3 Routes"
  license:
    name: "GPL v2"
    url: "https://www.gnu.org/licenses/old-licenses/gpl-2.0.de.html"
host: "demo.studip.de"
basePath: "/plugins.php/opencast/api"
schemes:
- "https"
paths:
  /videos:
    get:
      tags:
      - "videos"
      summary: "Get the videos the session user has rights on"
      operationId: "getVideosForUser"
      produces:
      - "application/json"
      parameters:
      - in: "query"
        name: "offset"
        type: integer
        description: The number of items to skip before starting to collect the result set
        default: 0
        minimum: 0
      - in: "query"
        name: "limit"
        required: false
        type: integer
        description: The numbers of items to return
        default: 20
        minimum: 20
      - in: "body"
        name: "filter"
        required: false
        description: Pass some filters to narrow down the list of videos
        schema:
            type: "array"
            items:
              $ref: "#/definitions/Filter"

      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Video"
  /playlists:
    get:
      tags:
      - "playlists"
      summary: "Get the playlist for the session user"
      operationId: "getPlaylistsForUser"
      produces:
      - "application/json"
      parameters:
      - in: "query"
        name: "offset"
        type: integer
        description: The number of items to skip before starting to collect the result set
        default: 0
        minimum: 0
      - in: "query"
        name: "limit"
        required: false
        type: integer
        description: The numbers of items to return
        default: 20
        minimum: 20
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Playlist"
    post:
      tags:
      - "playlists"
      summary: "Add a new playlist for the current user"
      operationId: "addPlaylistsForUser"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Playlist object to be added for the current user"
        required: true
        schema:
          $ref: "#/definitions/Playlist"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "object"
            items:
              $ref: "#/definitions/Playlist"
  /playlists/{token}:
    parameters:
      - name: "token"
        in: "path"
        description: "ID of the playlist"
        required: true
        type: "integer"
    get:
      tags:
      - "playlists"
      summary: "Get the playlist with the passed id"
      operationId: "getPlaylistsForId"
      produces:
      - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "object"
            items:
              $ref: "#/definitions/Playlist"
    put:
      tags:
      - "playlists"
      summary: "Update the playlist with the passed id"
      operationId: "putPlaylistsForId"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Playlist object to be updated"
        required: true
        schema:
          $ref: "#/definitions/Playlist"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "object"
            items:
              $ref: "#/definitions/Playlist"
    delete:
      tags:
      - "playlists"
      summary: "Delete the playlist with the passed id (if current user has permissions to do so)"
      operationId: "deletePlaylistsForId"
      responses:
        "200":
          description: "successful operation"
  /playlists/{token}/video/{token}:
    parameters:
      - name: "token"
        in: "path"
        description: "token reference for playlist or video"
        required: true
        type: "integer"
    put:
      tags:
      - "playlists"
      summary: "Add video to playlist"
      operationId: "addVideoToPlaylist"
      produces:
      - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "object"
            items:
              $ref: "#/definitions/Video"
    delete:
      tags:
      - "playlists"
      summary: "Delete video from playlist"
      operationId: "deleteVideoFromPlaylist"
      produces:
      - "application/json"
      responses:
        "200":
          description: "successful operation"
  /playlists/{token}/user:
    parameters:
      - name: "token"
        in: "path"
        description: "ID of the playlist"
        required: true
        type: "integer"
    put:
      tags:
      - "playlists"
      summary: "Add user with perms to playlist"
      operationId: "addPermsToPlaylist"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "formData"
        description: "User to add/modify perms for the playlist"
        required: true
        type: "string"
      - name: "perm"
        in: "formData"
        description: "The perm the user shall have"
        required: true
        type: "string"
        enum: ["owner","write","read","share"]
      responses:
        "200":
          description: "successful operation"
  /playlists/{token}/videos:
    parameters:
      - name: "token"
        in: "path"
        description: "ID of the playlist"
        required: true
        type: "integer"
    get:
      tags:
      - "playlists"
      summary: "Get videos on the passed playlist"
      operationId: "getVideosForPlaylist"
      produces:
      - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "object"
            items:
              $ref: "#/definitions/Video"
  /playlists/{token}/courses:
    parameters:
      - name: "token"
        in: "path"
        description: "ID of the playlist"
        required: true
        type: "integer"
    get:
      tags:
      - "playlists"
      summary: "Get courses associated with the passed playlist"
      operationId: "getCoursesForPlaylist"
      produces:
      - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "object"
            items:
              $ref: "#/definitions/Video"
  /playlists/{token}/user/{username}:
    parameters:
      - name: "token"
        in: "path"
        description: "ID of the playlist"
        required: true
        type: "integer"
      - name: "username"
        in: "path"
        description: "Username of the user"
        required: true
        type: "string"
    delete:
      tags:
      - "playlists"
      summary: "Remove perms for user from playlist"
      operationId: "removePermsFromPlaylist"
      produces:
      - "application/json"
      responses:
        "200":
          description: "successful operation"
  /courses:
    get:
      tags:
      - "courses"
      summary: "returns a list of all courses the current user has tutor perms for or higher"
      operationId: "getCoursesForUser"
      produces:
      - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Course"
  /courses/{course_id}/config:
    parameters:
      - name: "course_id"
        in: "path"
        description: "ID of course"
        required: true
        type: "string"
    get:
      tags:
      - "courses"
      summary: "Returns the config settings for this course, like series and configured workflow"
      operationId: "getConfigForCourse"
      produces:
      - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/CourseConfig"
  /courses/{course_id}/playlists:
    parameters:
      - name: "course_id"
        in: "path"
        description: "ID of course"
        required: true
        type: "string"
    get:
      tags:
      - "courses"
      summary: "Returns playlists for this course. Videos without explicit playlist in this course are mapped to a virtual playlist which can be accessed via the standard playlist routes"
      operationId: "getPlaylistsForCourse"
      produces:
      - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "object"
            items:
              $ref: "#/definitions/Playlist"
  /courses/{course_id}/playlist/{token}:
    parameters:
      - name: "token"
        in: "path"
        description: "ID of the playlist"
        required: true
        type: "integer"
      - name: "course_id"
        in: "path"
        description: "ID of course"
        required: true
        type: "string"
    put:
      tags:
      - "courses"
      summary: "Add playlist to course"
      operationId: "addPlaylistToCourse"
      produces:
      - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Playlist"
    delete:
      tags:
      - "courses"
      summary: "Remove Playlist from course"
      operationId: "removePlaylistFromCourse"
      produces:
      - "application/json"
      responses:
        "200":
          description: "successful operation"
  /courses/{course_id}/{semester_filter}/schedule:
    parameters:
      - name: "course_id"
        in: "path"
        description: "ID of course"
        required: true
        type: "string"
      - name: "semester_filter"
        in: "path"
        description: "ID of the selected semester filter or 'all'"
        required: true
        type: "string"
    get:
      tags:
      - "courses"
      summary: "Get list of scheduled events for this course"
      operationId: "getListOfScheduleEvents"
      produces:
      - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ScheduledEvent"
  /videos/{token}:
    parameters:
      - name: "token"
        in: "path"
        description: "ID of the video"
        required: true
        type: "integer"
    get:
      tags:
      - "videos"
      summary: "Get Video for id"
      operationId: "getVideo"
      produces:
      - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "object"
            items:
              $ref: "#/definitions/Video"
    put:
      tags:
      - "videos"
      summary: "Update Video with ID"
      operationId: "updateVideo"
      parameters:
      - in: "body"
        name: "body"
        description: "Video object to be updated"
        required: true
        schema:
          $ref: "#/definitions/Video"
      produces:
      - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "object"
            items:
              $ref: "#/definitions/Video"
    delete:
      tags:
      - "videos"
      summary: "Remove the video from Stud.IP and from Opencast!"
      description: "**This operation is used to completely remove a video. It will remove the entry from Stud.IP and retract and delete the event completely in Opencast, so use with care!**"
      operationId: "deleteVideo"
      produces:
      - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "object"
            items:
              $ref: "#/definitions/Video"
  /tags:
    get:
      tags:
      - "tags"
      summary: "Get all available tags for this user"
      operationId: "getTagsForUser"
      produces:
      - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Tag"
  /config:
    get:
      tags:
      - "config"
      summary: "Get opencast configuration with all servers"
      operationId: "getOpencastConfig"
      produces:
      - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "object"
            items:
              $ref: "#/definitions/OpencastConfig"
            example:
            - id: '1'
              service_url: https://opencast.example.com
              service_user: user
              service_password: password
              service_version: '11'
              settings:
                upload_chunk_size: '5000000'
                number_of_configs: '1'
                time_buffer_overlap: '60'
                ssl_verify_peer: true
                ssl_verify_host: true
                ssl_cipher_list: none
                lti_consumerkey: CONSUMERKEY
                lti_consumersecret: CONSUMERSECRET
                paella: true
                livestream: false
                service_url: https://opencast.example.com
                service_user: user
                service_password: password
              upload: null
              schedule: null
            - settings:
              - name: OPENCAST_TOS
                description: Terms of service
                value: ''
                type: string
              - name: OPENCAST_SHOW_TOS
                description: Müssen Lehrende einem Datenschutztext zustimmen, bevor sie das Opencast-Plugin in einer Veranstaltung verwenden können?
                value: false
                type: boolean
              - name: OPENCAST_ALLOW_ALTERNATE_SCHEDULE
                description: Dürfen Lehrende abweichende Aufzeichnungszeiten einstellen?
                value: false
                type: boolean
              - name: OPENCAST_ALLOW_MEDIADOWNLOAD
                description: Wird Nutzern angeboten, Aufzeichnungen herunterzuladen?
                value: true
                type: boolean
              - name: OPENCAST_ALLOW_STUDIO
                description: Wird Nutzern angeboten, Aufzeichnungen mit Opencast Studio zu erstellen?
                value: true
                type: boolean
              - name: OPENCAST_HIDE_EPISODES
                description: Sollen Videos standardmäßig nur für Lehrende sichtbar sein?
                value: false
                type: boolean
              - name: OPENCAST_TUTOR_EPISODE_PERM
                description: Sollen Tutor/innen im Opencast-Plugin die gleichen Rechte haben wie Dozent/innen?
                value: true
                type: boolean
            - languages:
              de_DE:
                id: de_DE
                picture: lang_de.gif
                name: Deutsch
    put:
      tags:
      - "config"
      summary: "Update global configuration settings"
      operationId: "updateOpencastConfig"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "settings"
        in: "formData"
        description: "User to add/modify perms for the playlist"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
  /config/{config_id}:
    parameters:
    - name: "config_id"
      in: "path"
      description: "ID of the server config"
      required: true
      type: "integer"
    get:
        tags:
        - "config"
        summary: "Get opencast configuration for server"
        operationId: "getOpencastServerConfig"
        produces:
        - "application/json"
        responses:
          "200":
            description: "successful operation"
    put:
        tags:
        - "config"
        summary: "Add or Update opencast configuration for server"
        operationId: "addOrUpdateOpencastServerConfig"
        produces:
        - "application/json"
        responses:
          "200":
            description: "successful operation"
    delete:
        tags:
        - "config"
        summary: "Delete opencast configuration for server"
        operationId: "deleteOpencastServerConfig"
        produces:
        - "application/json"
        responses:
          "200":
            description: "successful operation"
  /config/simple:
    get:
        tags:
        - "config"
        summary: "Get the list of configured Opencast servers and the global config options, without any credentials or unsafe config options"
        operationId: "getSimpleOpencastServerConfig"
        produces:
        - "application/json"
        responses:
          "200":
            description: "successful operation"
  /lti/launch_data:
    get:
      tags:
      - "lti"
      summary: "Get the LTI launch data, signed and ready to send"
      operationId: "getLTILaunchData"
      produces:
      - "application/json"
      responses:
          "200":
            description: "successful operation"
  /lti/launch_data/{context_id}:
    parameters:
      - name: "context_id"
        in: "path"
        description: "ID of course or institute"
        required: true
        type: "string"
    get:
      tags:
      - "lti"
      summary: "Get the LTI launch data, signed and ready to send for the passed context"
      operationId: "getLTILaunchDataForContext"
      produces:
      - "application/json"
      responses:
          "200":
            description: "successful operation"
  /schedule/{schedule_id}:
    parameters:
    - name: "schedule_id"
      in: "path"
      description: "ID of scheduled event"
      required: true
      type: "string"
    get:
        tags:
        - "schedule"
        summary: "Get scheduled event"
        operationId: "getScheduledEvent"
        produces:
        - "application/json"
        responses:
          "200":
            description: "successful operation"
            schema:
              $ref: "#/definitions/ScheduledEvent"
    post:
      tags:
      - "schedule"
      summary: "Add a new scheduled event"
      operationId: "addScheduledEvent"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "ScheduledEvent object to be added, course is determined by date_id"
        required: true
        schema:
          $ref: "#/definitions/ScheduledEvent"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "object"
            items:
              $ref: "#/definitions/ScheduledEvent"
    put:
        tags:
        - "schedule"
        summary: "Update a scheduled event"
        operationId: "updateScheduledEvent"
        produces:
        - "application/json"
        parameters:
        - in: "body"
          name: "body"
          description: "Update an existing scheduled event"
          required: true
          schema:
            $ref: "#/definitions/ScheduledEvent"
        responses:
          "200":
            description: "successful operation"
            schema:
              $ref: "#/definitions/ScheduledEvent"
    delete:
        tags:
        - "schedule"
        summary: "Delete a scheduled event"
        operationId: "deleteScheduledEvent"
        produces:
        - "application/json"
        responses:
          "200":
            description: "successful operation"
  /opencast/user/{username}:
    get:
      tags:
      - "opencast"
      summary: "Get user and roles by user name"
      description: "Returns the user with all necessary role ids"
      operationId: "getUserByName"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "query"
        description: "API Key to use for the call"
        required: true
        type: "string"
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched."
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
definitions:
  Video:
    type: "object"
    properties:
      opencast_id:
        type: "string"
        description: "The id of the event in Opencast"
      token:
        type: "string"
        format: "varchar(8)"
        description: "If not empty, this is the token for videos made accesible via secret link"
      title:
        type: "string"
      description:
        type: "string"
      author:
        type: "string"
      contributor:
        type: "string"
      track_link:
        type: "string"
      length:
        type: "integer"
      annotation_tool:
        type: "string"
      downloads:
        type: "array"
        items:
          $ref: '#/definitions/Download'
      type:
        type: "string"
        enum: ["scheduled", "upload", "livestream"]
      mkdate:
        type: "string"
        format: "date-time"
    required:
      - id
  Download:
    type: "object"
    properties:
      type:
        type: "string"
      url:
        type: "string"
      info:
        type: "string"
      size:
        type: "integer"
  Playlist:
    type: "object"
    properties:
      title:
        type: "string"
        example: "Meine Videos"
      description:
        type: "string"
      visibility:
        type: "string"
        enum: ["internal", "free", "public"]
      mkdate:
        type: "string"
        format: "date-time"
      chdate:
        type: "string"
        format: "date-time"
      references:
        type: "array"
        items:
          $ref: '#/definitions/PlaylistReference'
    required:
      - token
      - title
  ScheduledEvent:
    type: "object"
    properties:
      id:
        type: "integer"
      resource_id:
        type: "string"
        example: "ddce269a1e3d054cae349621c198dd52"
      date_id:
        type: "string"
        example: "ddce269a1e3d054cae349621c198dd52"
      event_id:
        type: "string"
        example: "f8c3de3d-1fea-4d7c-a8b0-29f63c4c3454"
    required:
      - resource_id
      - date_id
  PlaylistReference:
    type: "object"
    properties:
      course_id:
        type: "string"
        format: "varchar(32)"
      visibility:
        type: "string"
        enum: ["hidden", "visible"]
  OpencastConfig:
    type: "object"
    properties:
      server:
        type: "object"
      settings:
        type: "object"
      languages:
        type: "object"
  Filter:
    type: "object"
    properties:
      type:
        type: "string"
        enum: ["text", "playlist", "tag"]
      value:
        type: "string"
  User:
    type: "object"
    properties:
      username:
        type: "string"
      roles:
        type: "array"
        items:
          type: "string"
  Course:
    type: "object"
    properties:
      start_semester:
        type: "object"
        example: "S1234567"
        properties:
          end_semester:
            type: "object"
            example: "WS2022/23"
            properties:
              id:
                type: "string"
              name:
                type: "string"
    example:
      S12345678:
        unbegrenzt:
          id: 1
          name: Kurs A
        WS2022/23:
          id: 2
          name: Kurs B
  CourseConfig:
    type: "object"
    properties:
      series:
        type: "object"
        properties:
          series_id:
            type: "string"
          visibility:
            type: "string"
            enum: [visible, invisible]
      workflow:
        type: "string"
        example: "upload"
  Tag:
    type: "array"
    items:
      type: "string"